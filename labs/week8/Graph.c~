// Graph.c ... implementation of Graph ADT
// Written by John Shepherd, May 2013

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "Graph.h"
#include "Queue.h"

// graph representation (adjacency matrix)
typedef struct GraphRep {
	int nV;		 // #vertices
	int nE;		 // #edges
	int **edges; // matrix of weights (0 == no edge)
} GraphRep;

// check validity of Vertex
int validV (Graph g, Vertex v)
{
	return (g != NULL && v >= 0 && v < g->nV);
}

// make an edge
static Edge mkEdge (Graph g, Vertex v, Vertex w)
{
	assert (g != NULL && validV (g, v) && validV (g, w));
	Edge new = {v, w}; // struct assignment
	return new;
}

// insert an Edge
// - sets (v,w) and (w,v)
void insertEdge (Graph g, Vertex v, Vertex w, int wt)
{
	assert (g != NULL && validV (g, v) && validV (g, w));

	if (g->edges[v][w] != 0 && g->edges[w][v] != 0)
		// an edge already exists; do nothing.
		return;

	g->edges[v][w] = wt;
	g->edges[w][v] = wt;
	g->nE++;
}

// remove an Edge
// - unsets (v,w) and (w,v)
void removeEdge (Graph g, Vertex v, Vertex w)
{
	assert (g != NULL && validV (g, v) && validV (g, w));
	if (g->edges[v][w] == 0 && g->edges[w][v] == 0)
		// an edge doesn't exist; do nothing.
		return;

	g->edges[v][w] = 0;
	g->edges[w][v] = 0;
	g->nE--;
}

// create an empty graph
Graph newGraph (int nV)
{
	assert (nV > 0);

	GraphRep *new = malloc (sizeof *new);
	assert (new != NULL);
	*new = (GraphRep){ .nV = nV, .nE = 0 };

	new->edges = calloc ((size_t) nV, sizeof (int *));
	assert (new->edges != NULL);
	for (int v = 0; v < nV; v++) {
		new->edges[v] = calloc ((size_t) nV, sizeof (int));
		assert (new->edges[v] != 0);
	}

	return new;
}

// free memory associated with graph
void dropGraph (Graph g)
{
	assert (g != NULL);
	for (int v = 0; v < g->nV; v++)
		free (g->edges[v]);
	free (g->edges);
	free (g);
}

// display graph, using names for vertices
void showGraph (Graph g, char **names)
{
	assert (g != NULL);
	printf ("#vertices=%d, #edges=%d\n\n", g->nV, g->nE);
	int v, w;
	for (v = 0; v < g->nV; v++) {
		printf ("%d %s\n", v, names[v]);
		for (w = 0; w < g->nV; w++) {
			if (g->edges[v][w]) {
				printf ("\t%s (%d)\n", names[w], g->edges[v][w]);
			}
		}
		printf ("\n");
	}
}

// find a path between two vertices using breadth-first traversal
// only allow edges whose weight is less than "max"
int findPath (Graph g, Vertex src, Vertex dest, int max, int *path)
{
	assert (g != NULL);
	path[0] = src;
	// if start point is equal to dest point, return 1
	if(src == dest) return 1;
	// if can directly goes from src to dest, return 2
	else if (g->edges[src][dest] < max) {
		path[1] = dest;
		return 2;
	}
	
	int step = 0;
	Queue queue = newQueue();
    // create new array, initialise every elements to be -1(never arrived)
	int visit[30];
	for(int i = 0; i < g->nV; i++) visit[i] = -1;

	int found = 0;
	visit[src] = src;
	// enqueqe src into queue
	QueueJoin(queue,src);
	while(found == 0 && !(QueueIsEmpty(queue))){
	// make an v equal to the index of head of queue
		int v = QueueLeave(queue);
	// if the lenght from v to dest is smaller than max, return it
		if(g->edges[v][dest] < max){
			found = 1;
			visit[dest] = v;
	// else keep adding the unarrived nodes into queue until it find a path
		} else {
			for(int i = 0; i < g->nV; i++){
				if(visit[i] == -1 && g->edges[v][i] < max) {
    // visit[i] = v means it will goes to place i from v
					visit[i] = v;
					QueueJoin(queue,i);
				}
			}
		}
	}
	
	dropQueue(queue);
	if(found == 0){
		return 0; // never find a path
	}

	int count = 0;
	// find length of path, i stand for from, visit[i] stand for 
	for(int i = dest; visit[i] != src; i = visit[i]){
		count++;
	}
	// make dest into path
	path[count+1] = dest;
	for(int i = count; i >= 0; i--){
	// 
		path[i] = visit[path[i+1]];
	}



	return count+2;
}
